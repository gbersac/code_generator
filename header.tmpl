\#ifndef ${class.getGuard()}
\#define ${class.getGuard()}

\#include <iostream>
\#include <sstream>

class ${class.name}
{
public:
	//constructors
	${class.name}();
	${class.name}(${class.name} const &);
	virtual ~${class.name}();

	//getters setters
#for $attr in $class.lstAttr
	${attr.getGetterRetType}	${attr.getGetterName()}()const;
	void		${attr.getSetterName()}(${attr.getSetterArgType});
#end for

	//other functions
	std::string	toString()const;

	${class.name}&	operator=(${class.name} const &);

protected:
#for $attr in $class.lstAttr
	${attr.getType}	${attr.getName()};
#end for
};

std::ostream	&operator<<(std::ostream &o, ${class.name} const &i);

\#endif /*${class.getGuard()}*/
