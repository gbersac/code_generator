\#include "${class.name}.hpp"

/******************************************************************************/
/* Constructors                                                               */
/******************************************************************************/

${class.name}::${class.name}()
{

}

${class.name}::${class.name}(${class.name} const &model)
{
	*this = model;
}

${class.name}::~${class.name}()
{

}

/******************************************************************************/
/* Getters Setters                                                            */
/******************************************************************************/

#for $attr in $class.lstAttr
${attr.aType} const& ${class.name}::${attr.getGetterName()}()const
{
	return ${attr.getName()};
}

void ${class.name}::${attr.getSetterName()}(${attr.aType} const &val)
{
	${attr.getName()} = val;
}

#end for
/******************************************************************************/
/* Other Functions                                                            */
/******************************************************************************/

std::string	${class.name}::toString() const
{
	std::stringstream ss;
#if len($class.lstAttr) > 0
	ss << "${class.name} {" <<
#for $attr in $class.lstAttr
			"${attr.name}[" <<  ${attr.getName()} << "] " <<
#end for
			"}";
#else
	ss << "${class.name}";
#end if
	return ss.str();
}

#if len($class.lstAttr) > 0
${class.name}& ${class.name}::operator=(${class.name} const &model)
#else
${class.name}& ${class.name}::operator=(${class.name} const &)
#end if
{
#for $attr in $class.lstAttr
	${attr.getName()} = model.${attr.getName()};
#end for
	return *this;
}

std::ostream &operator<<(std::ostream &o, ${class.name} const &i)
{
	o << i.toString();
	return o;
}
