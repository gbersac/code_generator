\#include "${className}.hpp"

/******************************************************************************/
/* Constructors                                                               */
/******************************************************************************/

${className}::${className}()
{

}

${className}::${className}(${className} const &model)
{
	*this = model;
}

${className}::~${className}()
{

}

/******************************************************************************/
/* Getters Setters                                                            */
/******************************************************************************/

#for $attr in $lstAttr
${attr.aType} const& ${className}::${attr.getGetterName()}()const
{
	return ${attr.getName()};
}

void ${className}::${attr.getSetterName()}(${attr.aType} const &val)
{
	${attr.getName()} = val;
}

#end for
/******************************************************************************/
/* Other Functions                                                            */
/******************************************************************************/

std::string	${className}::toString() const
{
	std::stringstream ss;
#if len($lstAttr) > 0
	ss << "${className} {" <<
#for $attr in $lstAttr
			"${attr.name}[" <<  ${attr.getName()} << "] " <<
#end for
			"}";
#else
	ss << "${className}";
#end if
	return ss.str();
}

#if len($lstAttr) > 0
${className}& ${className}::operator=(${className} const &model)
#else
${className}& ${className}::operator=(${className} const &)
#end if
{
#for $attr in $lstAttr
	${attr.getName()} = model.${attr.getName()};
#end for
	return *this;
}

std::ostream &operator<<(std::ostream &o, ${className} const &i)
{
	o << i.toString();
	return o;
}
