case class ${class.className()}(${class.attributeList()})

object ${class.className()} {
  implicit lazy val xmlRule: Rule[Node, ${class.className()}] = From[Node] { __ =>
    import jto.validation.xml.Rules._
#if $class.hasDateChild()
    implicit val dateTimeRule = JtoValidationUtils.dateTimeXmlRule(dateFormatterOMDE)
    implicit val dateTimeOptionRule = JtoValidationUtils.dateTimeOrOptionXmlRule(dateFormatterOMDE)
    implicit val dateTimeNaissanceRule = JtoValidationUtils.dateTimeXmlRule(dateNaissanceFormatterOMDE)
    implicit val dateTimeNaissanceOptionRule = JtoValidationUtils.dateTimeOrOptionXmlRule(dateNaissanceFormatterOMDE)
#end if
#if $class.hasYesNoChild()
    implicit val ouiNonRule = models.Constants.OuiNon.xmlToBooleanRule
    implicit val ouiNonOptionRule = models.Constants.OuiNon.xmlToOptionalBooleanRule
#end if
${class.childsXmlValidator()}
  }

#if $class.level != 0
${class.innerClassStr()}
#end if
  implicit val fmt = Json.format[${class.className()}]
}
